##################################
##################################
########## MoA analysis ##########
##################################
##################################


library(panelr)
library(cowplot)
library(tidyverse)
library(readxl)
library(lme4)
library(survey)
library(stats)
library(janitor)
library(dplyr)
library(ggplot2)
library(lmerTest)
library(performance)
library(effectsize)
library(ggeffects) 
library(sjPlot)
library(glmtoolbox)
library(jtools)


######################
## Importing dataset #
######################
rm(list = ls())


Data<-read_excel("C:/Users/olyai/Desktop/data stage/Created datasets/Dataset_long_MoA&MH&SC.xlsx")

Data %>% distinct(IDPERS, .keep_all = TRUE) %>%count (IDPERS) # 2333  unique IDPERS answered


###########################################
####  Adjustment factors selection  #######
###########################################

# Age as numeric
Data$AGE <- as.numeric(Data$AGE )
# Financial satisfaction as numeric 
Data$Finan_satisfaction_ <- as.numeric(Data$Finan_satisfaction_ )
# Health_Status_ as numeric 
Data$Health_Status_ <- as.numeric(Data$Health_Status_ )

# Convert Interview_language_ to a factor
Data$Interview_language_ <- as.factor(Data$Interview_language_ )
levels(Data$Interview_language_)
Data$Interview_language_ <- relevel(Data$Interview_language_, ref = "German")

# Convert Gender & IDHOUS to a factor
Data$Gender <- as.factor(Data$Gender)
Data$IDHOUS <- as.factor(Data$IDHOUS)

# Convert Mode_of_Data_Collection_ to a factor
Data$Mode_of_Data_Collection_ <- as.factor(Data$Mode_of_Data_Collection_ )
levels(Data$Mode_of_Data_Collection_)
Data$Mode_of_Data_Collection_ <- relevel(Data$Mode_of_Data_Collection_, ref = "CATI")

# Removing all NA in weights
Data <- Data[complete.cases(Data$new_weight_), ]
Data %>% distinct(IDPERS, .keep_all = TRUE) %>%count (IDPERS) # 2333

MoA_Data <- Data[, c("IDPERS", "IDHOUS", "MoA_","new_weight_", "Year", "Score_Neg_Emotions_", "SRS_", "Finan_satisfaction_", "Gender", "Mode_of_Data_Collection_", "Interview_language_", "AGE")]

# Removing all NA for MoA
MoA_Data_Clean <- na.omit(MoA_Data) # 3705   12
MoA_Data_Clean %>% distinct(IDPERS, .keep_all = TRUE) %>%count (IDPERS) # 2,062

backward_diff_contrast <- function(levels) {
  n <- length(levels)
  matrix <- matrix(0, nrow = n, ncol = n - 1)
  for (i in 1:(n - 1)) {
    matrix[i, i] <- -1
    matrix[i + 1, i] <- 1
  }
  colnames(matrix) <- paste("Level", 1:(n - 1), "vs Level", 2:n)
  rownames(matrix) <- paste("Level", 1:n)
  return(matrix)
}

MoA_Data_Clean$Year <- factor(MoA_Data_Clean$Year, levels = c("2018", "2019", "2020", "2021"))
contrasts(MoA_Data_Clean$Year) <- backward_diff_contrast(levels(MoA_Data_Clean$Year))


# AGE linear + quadratic
AGE_l <- contr.poly( 8 )[ , 1 ]
AGE_q <- contr.poly( 8 )[ , 2 ]

# AGE^1 term (linear)
MoA_Data_Clean$AGE_l <- AGE_l[ match( MoA_Data_Clean$AGE , seq( 18 , 25 , 1 ) ) ]
# AGE^2 term (quadratic)
MoA_Data_Clean$AGE_q <- AGE_q[ match( MoA_Data_Clean$AGE , seq( 18 , 25 , 1 ) ) ]


##### Summary Stat ####

summary_MoA <- Data %>% 
  group_by(Year) %>% 
  summarize(
    mean = mean(MoA_, na.rm = T),
    median = median(MoA_, na.rm = T ),
    min = min(MoA_, na.rm = T ),
    max = max(MoA_, na.rm = T ),
    sd = sd(MoA_, na.rm = T), 
    n = n()
  )

t <- ggplot(summary_MoA, aes(x = Year, y = mean)) +
  geom_bar(stat = "identity", fill = "khaki") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  labs(title = "Markers of Adulhood", subtitle = "Non weightened results",
       x = "Year",
       y = "Mean + SD") +
  theme_minimal()
t<-t + geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 3.5)

summary_Fin_Indep <- Data %>% 
  group_by(Year) %>% 
  summarize(
    mean = mean(Fin_Indep_, na.rm = T),
    median = median(Fin_Indep_ , na.rm = T),
    min = min(Fin_Indep_ , na.rm = T),
    max = max(Fin_Indep_ , na.rm = T),
    sd = sd(Fin_Indep_, na.rm = T), 
    n = n()
  )

f <- ggplot(summary_Fin_Indep, aes(x = Year, y = mean)) +
  geom_bar(stat = "identity", fill = "lavender") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  labs(title = "Financial Independance", subtitle = "Non weightened results",
       x = "Year",
       y = "Mean + SD") +
  theme_minimal()
f<-f + geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 3.5)



summary_Stab_R <- Data %>% 
  group_by(Year) %>% 
  summarize(
    mean = mean(Stab_R_, na.rm = T),
    median = median(Stab_R_ , na.rm = T),
    min = min(Stab_R_ , na.rm = T),
    max = max(Stab_R_ , na.rm = T),
    sd = sd(Stab_R_, na.rm = T), 
    n = n()
  )

s <- ggplot(summary_Stab_R, aes(x = Year, y = mean)) +
  geom_bar(stat = "identity", fill = "lightpink2") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  labs(title = "Stable relationship", subtitle = "Non weightened results",
       x = "Year",
       y = "Mean + SD") +
  theme_minimal()
s<-s + geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 3.5)



summary_Ind_H <- Data %>% 
  group_by(Year) %>% 
  summarize(
    mean = mean(Ind_H_, na.rm = T),
    median = median(Ind_H_ , na.rm = T),
    min = min(Ind_H_ , na.rm = T),
    max = max(Ind_H_ , na.rm = T),
    sd = sd(Ind_H_, na.rm = T), 
    n = n()
  )

h <- ggplot(summary_Ind_H, aes(x = Year, y = mean)) +
  geom_bar(stat = "identity", fill = "lavenderblush2") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  labs(title = "Independant Housing", subtitle = "Non weightened results",
       x = "Year",
       y = "Mean + SD") +
  theme_minimal()
h<-h + geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 3.5)


summary_Job<- Data %>% 
  group_by(Year) %>% 
  summarize(
    mean = mean(Job_, na.rm = T),
    median = median(Job_ , na.rm = T),
    min = min(Job_ , na.rm = T),
    max = max(Job_ , na.rm = T),
    sd = sd(Job_, na.rm = T), 
    n = n()
  )

j <- ggplot(summary_Job, aes(x = Year, y = mean)) +
  geom_bar(stat = "identity", fill = "darkkhaki") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  labs(title = "Job", subtitle = "Non weightened results",
       x = "Year",
       y = "Mean + SD")+
  theme_minimal()
j<-j + geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 3.5)


summary_educ<- Data %>% 
  group_by(Year) %>% 
  summarize(
    mean = mean(Finish_Educ_, na.rm = T),
    median = median(Finish_Educ_, na.rm = T ),
    min = min(Finish_Educ_, na.rm = T ),
    max = max(Finish_Educ_ , na.rm = T),
    sd = sd(Finish_Educ_, na.rm = T), 
    n = n()
  )

e <- ggplot(summary_educ, aes(x = Year, y = mean)) +
  geom_bar(stat = "identity", fill = "steelblue1") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  labs(title = "Finishing education", subtitle = "Non weightened results",
       x = "Year",
       y = "Mean + SD") +
  theme_minimal()
e <-e + geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 3.5)

cowplot::plot_grid(t,f,s, e, h, j)

# Plotting the percentages

DataX <- Data %>%
  group_by(Year, MoA_) %>%
  summarize(count = n()) %>%
  group_by(Year) %>%
  mutate(percentage = count / sum(count) * 100)

ggplot(DataX, aes(x = MoA_, y = percentage, fill = MoA_)) +
  geom_bar(stat = "identity") +
  facet_grid(~Year) +
  labs(title = "Marker of Adulthood responses by Year", x = "Score MoA", y = "Percentage") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +  # Format y-axis as percentage
  theme_minimal()



############ Test to see is we need a stratification ###########

# W
MoA_by_gender <- lmer(MoA_ ~ Gender+ (1 | IDPERS) + (1|IDPERS:IDHOUS), weights = new_weight_, data = MoA_Data_Clean)
tab_model(MoA_by_gender)
# Estimate :-0.20, IC95%	= (-0.32;-0.08	),	p = 0.002
# NW
MoA_by_gender_2 <- lmer(MoA_ ~ Gender+ (1 | IDPERS) + (1|IDPERS:IDHOUS), data = MoA_Data_Clean)
tab_model(MoA_by_gender_2)
# Estimate :-0.24, IC95%	= (-0.36;-0.11	),	p = <0.001

###################################################
########### Gender Stratified analysis ############
###################################################

# 1st I need to construct 2 datasets: one for Female, other for Male 
# and recalculate the weight

MoA_Data_Clean %>% tabyl(Gender) %>% adorn_totals("row")
# 1952  Female
# 1753  Male

# 2) Calculate the sum of the old weights for the subsample
MoA_Data_Clean %>% 
  filter(Gender == "Female") %>% 
  summarise(sum(new_weight_)) # 1499
MoA_Data_Clean %>% 
  filter(Gender == "Male") %>% 
  summarise(sum(new_weight_)) # 2063

MoA_Data_Clean_G <- MoA_Data_Clean 
# 3) Create a new column for each gender
MoA_Data_Clean_G <- MoA_Data_Clean_G %>%
  mutate(weight_by_gender = ifelse(Gender == "Female", (1952 * (new_weight_ /1499)), 
                                   (1753 * (new_weight_ /2063))))

# Verification Ã  la main

MoA_Data_Clean_G %>% filter(IDPERS == 27104 & Year == 2018) %>% tabyl (new_weight_, Gender) # 0.6844214
MoA_Data_Clean_G %>% filter(IDPERS == 27104 & Year == 2018) %>% tabyl (weight_by_gender) # 0.5815757  
(0.6844214/2063) * 1753

MoA_Data_Clean_G %>% filter(IDPERS == 181103 & Year == 2019) %>% tabyl (new_weight_, Gender) # 0.4820096 
(0.4820096 /1499)*1952
MoA_Data_Clean_G %>% filter(IDPERS == 181103 & Year == 2019) %>% tabyl (weight_by_gender) # 0.6276736  


MoA_Data_Clean_F<-MoA_Data_Clean_G %>% filter(Gender == "Female")
MoA_Data_Clean_M<-MoA_Data_Clean_G %>% filter(Gender == "Male")

################ 
##### MEM ######
################ 


MEM_MoA_W_F <- lmer(MoA_ ~ Year +  Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+ (1 | IDPERS) + (1|IDPERS:IDHOUS), weights = weight_by_gender, data = MoA_Data_Clean_F)
tab_model(MEM_MoA_W_F)
summary(MEM_MoA_W_F)

check_model(MEM_MoA_W_F)
check_autocorrelation(MEM_MoA_W_F) #Autocorrelated residuals detected (p < .001).
check_outliers(MEM_MoA_W_F) #OK: 88 outliers detected. Based on the following method and threshold: cook (0.918),  For variable: (Whole model)
check_heteroscedasticity(MEM_MoA_W_F) #Error variance appears to be homoscedastic (p = 0.915).
check_normality(MEM_MoA_W_F)#Non-normality of residuals detected (p < .001).
performance:: icc(MEM_MoA_W_F, by_group = T) #0.774

# Group         |   ICC
---------------------
# IDPERS:IDHOUS | 0.743  
# IDPERS        | 0.031

performance:: icc(lmer(MoA_ ~ Year +  Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q  +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+ (1 | IDPERS) , weights = weight_by_gender, data = MoA_Data_Clean_F), by_group = T)
#0.721
performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q  +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_ + (1|IDPERS:IDHOUS) , weights = weight_by_gender, data = MoA_Data_Clean_F), by_group = T)
#0.777
performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q  +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+(1 | IDHOUS) , weights = weight_by_gender, data = MoA_Data_Clean_F), by_group = T)
#0.743

# Non weightened

MEM_MoA_UnW_F <- lmer(MoA_ ~ Year + Score_Neg_Emotions_+ SRS_+ Finan_satisfaction_ + Interview_language_ + Mode_of_Data_Collection_ + AGE_l +AGE_q  + (1 | IDPERS) + (1|IDPERS:IDHOUS), data = MoA_Data_Clean_F)
tab_model(MEM_MoA_UnW_F)
summary(MEM_MoA_UnW_F)

performance:: icc(MEM_MoA_UnW_F, by_group = T) # 0.732
check_model(MEM_MoA_UnW_F)
check_autocorrelation(MEM_MoA_UnW_F) #Autocorrelated residuals detected (p < .001).
check_outliers(MEM_MoA_UnW_F) #OK: 31 outliers detected. Based on the following method and threshold: cook (0.907),  For variable: (Whole model)
check_heteroscedasticity(MEM_MoA_UnW_F) #Error variance appears to be homoscedastic (p = 0.976).
check_normality(MEM_MoA_UnW_F)#OK: residuals appear as normally distributed (p = 0.867).

performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+ (1 | IDPERS) , data = MoA_Data_Clean_F), by_group = T)
# 0.619
performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_ + (1|IDPERS:IDHOUS) , data = MoA_Data_Clean_F), by_group = T)
# 0.731
performance:: icc(lmer(MoA_ ~ Year +  Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+(1 | IDHOUS) ,data = MoA_Data_Clean_F), by_group = T)
# 0.696


###################
### GEE Female ####
###################


MoA_Clean_F_pd <- panel_data(MoA_Data_Clean_F, id = IDPERS, wave = Year) # Dataset preparation -> need to be clean
MoA_Clean_F_pd <- MoA_Clean_F_pd[order(MoA_Clean_F_pd$IDPERS), ]
MoA_Clean_F_pd$Year <- factor(MoA_Clean_F_pd$Year, levels = c("2018", "2019", "2020", "2021"))
contrasts(MoA_Clean_F_pd$Year) <- backward_diff_contrast(levels(MoA_Clean_F_pd$Year))


MoA_f = formula(MoA_ ~ Year +  Interview_language_ + Mode_of_Data_Collection_+ AGE_l + AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_)

### Weigtened data

g1 <- glmgee(MoA_f,
             data = MoA_Clean_F_pd,
             weights = weight_by_gender,
             id = (IDPERS:IDHOUS),
             corstr = "unstructured") 

summary(g1)

g2 <- update(g1,corstr = "exchangeable")   
summary(g2)

### Non weigtened data

g3 <- glmgee(MoA_f,
             data = MoA_Clean_F_pd,
             id = (IDPERS:IDHOUS),
             corstr = "unstructured")  
summary(g3)

g4 <- update(g3,corstr = "exchangeable") 
summary(g4) 


## Function that i created to make a table with criterions #GLMGEE
model_selection_function <- function(model1, model2, model3, model4, verbose = FALSE) {
  a <- CIC(model1, model2, model3, model4, verbose = verbose)
  b <- QIC(model1, model2, model3, model4, verbose = verbose)
  d <- RJC(model1, model2, model3, model4, verbose = verbose)
  e <- PAC(model1, model2, model3, model4, verbose = verbose)
  
  df <- data.frame(CIC = a, QIC = b[,"QIC"], RJC = d[,"RJC"], PAC = e[, "PAC"])
  return(df)
}

# Call the function with your GEE models 
model_selection_function(g1, g2, g3, g4)


######################################################################
##### Weightened analysis, unstructured WCS (g1 as initial model) ####
######################################################################
MoA_Clean_F_pd_w<-MoA_Clean_F_pd

##### removing influential obs based on Cooks.d

cooks_d <-cooks.distance(g1, level = c("observations")) # 1952 (as number of total id)

cutoff =4/length(cooks_d)

# Identify influential observations
influential_obs<-which(cooks_d > cutoff) # 78 id
MoA_Clean_F_pd_w<-MoA_Clean_F_pd_w[-(which(cooks_d > cutoff)), ] # 1874 obs

g1.2 <- update(g1,data = MoA_Clean_F_pd_w)
summary(g1.2) 
round(summary(g1.2)[,1],2)
round(confint(g1.2),2)
raw_pvalues <- c(7.0171e-11, 0.00128953, 0.03548844 ,0.11007826)
round(p.adjust(raw_pvalues, method = "holm") ,3)
#0.000 0.004 0.071 0.110

###############
##### plot ####
###############

# 1) Create an unadjusted model

g1.2_unad<- glmgee(MoA_ ~ Year,
                   data = MoA_Clean_F_pd_w,
                   weights = weight_by_gender,
                   id = (IDPERS:IDHOUS),
                   corstr = "unstructured") 
summary(g1.2_unad)
raw_pvalues <- c(2.22e-16, 0.01448551, 0.00017889,  0.00027396)
adjusted_pvalues <- p.adjust(raw_pvalues, method = "holm")
# 8.880000e-16 1.448551e-02 5.366700e-04 5.479200e-04
confint(g2.2_unad)


# 2) Create an survey design data with predicted values
MoA_Clean_F_pd_w$predicted_ad <- predict(g1.2, type = "link")
MoA_Clean_F_pd_w$predicted_unad <- predict(g1.2_unad, type = "link")

survey_design_w<- svydesign(ids = ~(IDPERS:IDHOUS), weights = MoA_Clean_F_pd_w$weight_by_gender, data = MoA_Clean_F_pd_w)

# 3) Plot the models

# Observed

observed_means <- svyby(~MoA_, ~Year, design = survey_design_w, FUN = svymean)
y <- svyby(~MoA_, by = ~Year, design = survey_design_w, svyvar) 
sd <- sqrt(y$MoA_)
observed_means$sd <- sd
observed_means$n<-svytotal(~Year, design = survey_design_w)
colnames(observed_means) <- c("Year", "mean", "se", "sd", "n")


#Hedges g for 2018 vs 2019
(1.949551 - 1.831772) / sqrt(((379.0043 - 1) * 1.430012 ^2 + 
                               (332.3992 - 1) * 1.461851 ^2) / 
                              (379.0043 + 332.3992 - 2))
# 0.08150948

#2019 vs 2020
(1.831772 - 1.850721) / sqrt(((332.3992 - 1) * 1.461851  ^2 + 
                               (731.7335 - 1) * 1.438715 ^2) / 
                              (332.3992 + 731.7335 - 2))
#-0.01310467

#2021 vs 2021
(1.850721- 1.814905)/ sqrt(((731.7335 - 1) * 1.438715 ^2 + 
                              (127.8725 - 1) * 1.371731 ^2) / 
                             (731.7335 + 127.8725 - 2))
#  0.02506362

# ES for Mode_of_Data_Collection_

calculate_hedges_g <- function(data, grouping_var, response_var) {
  # Ensure that the grouping variable is a factor
  data[[grouping_var]] <- as.factor(data[[grouping_var]])
  
  # Calculate means and standard deviations by group
  observed_means <- svyby(as.formula(paste("~", response_var)), 
                          as.formula(paste("~", grouping_var)), 
                          design = survey_design_w, FUN = svymean)
  
  r <- svyby(as.formula(paste("~", response_var)), 
             by = as.formula(paste("~", grouping_var)), 
             design = survey_design_w, svyvar) 
  sd <- sqrt(r[, 2])
  observed_means$sd <- sd
  observed_means$n <- svytotal(as.formula(paste("~", grouping_var)), design = survey_design_w)
  colnames(observed_means) <- c("grouping_var", "mean", "se", "sd", "n")
  
  # Calculate Hedges' g effect size
  pooled_sd <- sqrt(((observed_means$n[1] - 1) * observed_means$sd[1]^2 + 
                       (observed_means$n[2] - 1) * observed_means$sd[2]^2) / 
                      (observed_means$n[1] + observed_means$n[2] - 2))
  g <- (observed_means$mean[2] - observed_means$mean[1]) / pooled_sd
  
  return(list(observed_means = observed_means, hedges_g = g))
}


calculate_hedges_g(data = survey_design_w,
                   grouping_var = "Mode_of_Data_Collection_",
                   response_var = "MoA_")

#0.05843743


# ES for Interview_language_
calculate_hedges_g(data = survey_design_w,
                   grouping_var = "Interview_language_",
                   response_var = "MoA_")

#-0.4904111

# ES for AGE linear + quadratic)
svycor(~MoA_ + AGE_l, design = survey_design_w)
#0.53
r_to_d(0.53)
#1.250003

svycor(~MoA_ + AGE_q, design = survey_design_w)
#0.04
r_to_d(0.04)
#0.08006408


# ES for Finan_satisfaction_
svycor(~MoA_ + Finan_satisfaction_, design = survey_design_w)
#0.01
r_to_d(0.01)
#0.020001

# ES for Score_Neg_Emotions_
svycor(~MoA_ + Score_Neg_Emotions_, design = survey_design_w)
#-0.22
r_to_d(-0.22)
#-0.4510508

# ES for SRS_
svycor(~MoA_ + SRS_, design = survey_design_w)
#0.15
r_to_d(0.15)
#0.303433


# Calculate the weighted mean from ad model

pred_means_ad <- svyby(~predicted_ad, ~Year, design = survey_design_w, FUN = svymean)
c <- svyby(~predicted_ad, by = ~Year, design = survey_design_w, svyvar) 
sd <- sqrt(c$fit)
pred_means_ad$sd <- sd
pred_means_ad$n<-svytotal(~Year, design = survey_design_w)
CI<-confint(svyby(~predicted_ad, ~Year, design = survey_design_w, FUN = svymean))
pred_means_ad <- cbind(pred_means_ad, CI[,"2.5 %"], CI[,"97.5 %"])
colnames(pred_means_ad) <- c("Year", "mean", "se", "sd", "n","CI_low", "CI_high")


# Calculate the weighted mean from unad model

pred_means_unad <- svyby(~predicted_unad, ~Year, design = survey_design_w, FUN = svymean)
r <- svyby(~predicted_unad, by = ~Year, design = survey_design_w, svyvar) 
sd <- sqrt(r$fit)
pred_means_unad$sd <- sd
pred_means_unad$n<-svytotal(~Year, design = survey_design_w)
CI<-confint(svyby(~pred_means_unad, ~Year, design = survey_design_w, FUN = svymean))
pred_means_unad <- cbind(pred_means_unad, CI[,"2.5 %"], CI[,"97.5 %"])
colnames(pred_means_unad) <- c("Year", "mean", "se", "sd", "n","CI_low", "CI_high")


# Combine the data

combined_data_x <- rbind(
  transform(pred_means_ad, Model = "Adjusted model"),
  transform(pred_means_unad, Model = "Crew model")
)

ggplot(combined_data_x, aes(x = Year, y = mean, color = Model, group = Model)) +
  geom_line() +
  geom_point(size = 3) +
  geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 5) +  # Add values on the points
  scale_color_manual(values = c( "Adjusted model" = "deeppink3", "Crew model" = "slateblue")) +  # Customize colors
  labs(x = "Year", y = "Markers of Adulthood Score [0;5] ", color = "GEE model", title = "Evolution of markers of adulhood", subtitle = "GEE model, weightened female data") +
  coord_cartesian(ylim = c(1.6,2.2)) +
  theme_minimal()


########################################################################
##### Unweightened analysis, exchangeable WCS (g4 as initial model) ####
########################################################################

MoA_Clean_F_pd_u<-MoA_Clean_F_pd

##### removing influential obs based on Cooks.d

cooks_d <-cooks.distance(g4, level = c("observations")) 

cutoff =4/length(cooks_d)

# Identify influential observations
influential_obs<-which(cooks_d > cutoff) # 116 id
MoA_Clean_F_pd_u<-MoA_Clean_F_pd_u[-(which(cooks_d > cutoff)), ] # 1836 obs

g4.2 <- update(g4,data = MoA_Clean_F_pd_u)
summary(g4.2) 
raw_pvalues <- c(2.22e-16, 6.8642e-13, 2.6921e-12,2.0270e-08)
adjusted_pvalues <- p.adjust(raw_pvalues, method = "holm") 
# 8.88000e-16 2.05926e-12 5.38420e-12 2.02700e-08
confint(g4.2)

###############
##### plot ####
###############

# 1) Create an unadjusted model

g4.2_unad<- glmgee(MoA_ ~ Year,
                   data = MoA_Clean_F_pd_u,
                   id = (IDPERS:IDHOUS),
                   corstr = "exchangeable") 
summary(g4.2_unad)
raw_pvalues <- c(2.22e-16, 0.00092385, 0.00010139, 6.3796e-07)
adjusted_pvalues <- p.adjust(raw_pvalues, method = "holm") 
# 8.88000e-16 9.23850e-04 2.02780e-04 1.91388e-06


# 2) Create an survey design data with predicted values
MoA_Clean_F_pd_u$predicted_ad <- predict(g4.2, type = "link")
MoA_Clean_F_pd_u$predicted_unad <- predict(g4.2_unad, type = "link")

survey_design_u<- svydesign(ids = ~(IDPERS:IDHOUS), data = MoA_Clean_F_pd_u)

# 3) Plot the models

# Observed
observed_means <- svyby(~MoA_, ~Year, design = survey_design_u, FUN = svymean)
y <- svyby(~MoA_, by = ~Year, design = survey_design_u, svyvar) 
sd <- sqrt(y$MoA_)
observed_means$sd <- sd
colnames(observed_means) <- c("Year", "mean", "se", "sd")

# Calculate the weighted mean from ad model
pred_means_ad <- svyby(~predicted_ad, ~Year, design = survey_design_u, FUN = svymean)
c <- svyby(~predicted_ad, by = ~Year, design = survey_design_u, svyvar) 
sd <- sqrt(c$fit)
pred_means_ad$sd <- sd
colnames(pred_means_ad) <- c("Year", "mean", "se", "sd")


# Calculate the weighted mean from unad model
pred_means_unad <- svyby(~predicted_unad, ~Year, design = survey_design_u, FUN = svymean)
r <- svyby(~predicted_unad, by = ~Year, design = survey_design_u, svyvar) 
sd <- sqrt(r$fit)
pred_means_unad$sd <- sd
colnames(pred_means_unad) <- c("Year", "mean", "se", "sd")


#####################
##### MEM Male ######
#####################
rm(list = setdiff(ls(), c("MoA_Data_Clean_M", "MoA_f", "calculate_hedges_g", "model_selection_function", "backward_diff_contrast")))


MEM_MoA_W_M <- lmer(MoA_ ~ Year +  Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+ (1 | IDPERS) + (1|IDPERS:IDHOUS), weights = weight_by_gender, data = MoA_Data_Clean_M)
tab_model(MEM_MoA_W_M)
summary(MEM_MoA_W_M)

check_model(MEM_MoA_W_M)
check_autocorrelation(MEM_MoA_W_M) #Autocorrelated residuals detected (p < .001).
check_outliers(MEM_MoA_W_M) #50 outliers detected. Based on the following method and threshold: cook (0.918),  For variable: (Whole model)
check_heteroscedasticity(MEM_MoA_W_M) #Error variance appears to be homoscedastic (p = 0.837).
check_normality(MEM_MoA_W_M)#Non-normality of residuals detected (p < .001).
performance:: icc(MEM_MoA_W_M, by_group = T) #0.726

# Group         |   ICC
---------------------
  # IDPERS:IDHOUS | 0.484  
  # IDPERS        | 0.242
  
  
performance:: icc(lmer(MoA_ ~ Year +  Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+ (1 | IDPERS) , weights = weight_by_gender, data = MoA_Data_Clean_M), by_group = T)
#0.672
performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_ + (1|IDPERS:IDHOUS) , weights = weight_by_gender, data = MoA_Data_Clean_M), by_group = T)
#0.727
performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+(1 | IDHOUS) , weights = weight_by_gender, data = MoA_Data_Clean_M), by_group = T)
#0.661

# Non weightened

MEM_MoA_UnW_M <- lmer(MoA_ ~ Year + Score_Neg_Emotions_+ SRS_+ Finan_satisfaction_ + Interview_language_ + Mode_of_Data_Collection_ + AGE_l +AGE_q+ (1 | IDPERS) + (1|IDPERS:IDHOUS), data = MoA_Data_Clean_M)
tab_model(MEM_MoA_UnW_M)
summary(MEM_MoA_UnW_M)

performance:: icc(MEM_MoA_UnW_M, by_group = T) # 0.698
check_model(MEM_MoA_UnW_M)
check_autocorrelation(MEM_MoA_UnW_M) #Autocorrelated residuals detected (p ).
check_outliers(MEM_MoA_UnW_M) #22 outliers detected. Based on the following method and threshold: cook (0.907),  For variable: (Whole model)
check_heteroscedasticity(MEM_MoA_UnW_M) #Error variance appears to be homoscedastic (p = 0.756).
check_normality(MEM_MoA_UnW_M)#Non-normality of residuals detected (p < .001).

performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+ (1 | IDPERS) , data = MoA_Data_Clean_M), by_group = T)
# 0.636
performance:: icc(lmer(MoA_ ~ Year + Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_ + (1|IDPERS:IDHOUS) , data = MoA_Data_Clean_M), by_group = T)
# 0.699
performance:: icc(lmer(MoA_ ~ Year +  Interview_language_ + Mode_of_Data_Collection_+ AGE_l +AGE_q +Finan_satisfaction_ + Score_Neg_Emotions_+ SRS_+(1 | IDHOUS) ,data = MoA_Data_Clean_M), by_group = T)
# 0.633


###################
### GEE Male ######
###################

MoA_Clean_M_pd <- panel_data(MoA_Data_Clean_M, id = IDPERS, wave = Year) # Dataset preparation -> need to be clean
MoA_Clean_M_pd <- MoA_Clean_M_pd[order(MoA_Clean_M_pd$IDPERS), ]
MoA_Clean_M_pd$Year <- factor(MoA_Clean_M_pd$Year, levels = c("2018", "2019", "2020", "2021"))
contrasts(MoA_Clean_M_pd$Year) <- backward_diff_contrast(levels(MoA_Clean_M_pd$Year))


### Weigtened data

g1 <- glmgee(MoA_f,
             data = MoA_Clean_M_pd,
             weights = weight_by_gender,
             id = (IDPERS:IDHOUS),
             corstr = "unstructured") 

summary(g1)

g2 <- update(g1,corstr = "exchangeable")   
summary(g2)

### Non weigtened data

g3 <- glmgee(MoA_f,
             data = MoA_Clean_M_pd,
             id = (IDPERS:IDHOUS),
             corstr = "unstructured")  
summary(g3)

g4 <- update(g3,corstr = "exchangeable") 
summary(g4) 


## Make a table with criterions 
model_selection_function(g1, g2, g3, g4)


######################################################################
##### Weightened analysis, exchangeable WCS (g2 as initial model) ####
######################################################################
MoA_Clean_M_pd_w<-MoA_Clean_M_pd

##### removing influential obs based on Cooks.d

cooks_d <-cooks.distance(g2, level = c("observations")) # 1753 (as number of total id)

cutoff =4/length(cooks_d)

# Identify influential observations
influential_obs<-which(cooks_d > cutoff) # 73 id
MoA_Clean_M_pd_w<-MoA_Clean_M_pd_w[-(which(cooks_d > cutoff)), ] # 1680 obs

g2.2 <- glmgee(MoA_f,
               data = MoA_Clean_M_pd_w,
               weights = weight_by_gender,
               id = (IDPERS:IDHOUS),
               corstr = "exchangeable") 

summary(g2.2) 
confint(g2.2)
raw_pvalues <- c(7.2834e-09, 0.0103660, 0.0810963 ,0.1968912)
adjusted_pvalues <- p.adjust(raw_pvalues, method = "holm") 
#2.913360e-08 3.109800e-02 1.621926e-01 1.968912e-01


###############
##### plot ####
###############

# 1) Create an unadjusted model

g2.2_unad<- glmgee(MoA_ ~ Year,
                   data = MoA_Clean_M_pd_w,
                   weights = weight_by_gender,
                   id = (IDPERS:IDHOUS),
                   corstr = "exchangeable") 
summary(g2.2_unad)
confint(g2.2_unad)
raw_pvalues <- c(2.22e-16, 0.1716056, 0.0220901,  0.0002925)
adjusted_pvalues <- p.adjust(raw_pvalues, method = "holm")
# Estimates: 1.72814   ; 0.06694;0.14149;0.16125           
# 8.880000e-16 1.716056e-01 4.418020e-02 8.775000e-04

# 2) Create an survey design data with predicted values
MoA_Clean_M_pd_w$predicted_ad <- predict(g2.2, type = "link")
MoA_Clean_M_pd_w$predicted_unad <- predict(g2.2_unad, type = "link")

survey_design_w<- svydesign(ids = ~(IDPERS:IDHOUS), weights = MoA_Clean_M_pd_w$weight_by_gender, data = MoA_Clean_M_pd_w)

# 3) Plot the models

# Observed

observed_means <- svyby(~MoA_, ~Year, design = survey_design_w, FUN = svymean)
y <- svyby(~MoA_, by = ~Year, design = survey_design_w, svyvar) 
sd <- sqrt(y$MoA_)
observed_means$sd <- sd
observed_means$n <- svytotal(~Year, design = survey_design_w)
colnames(observed_means) <- c("Year", "mean", "se", "sd","n")

#2018 vs 2019
(1.784684  - 1.628829 ) / sqrt(((265.6749 - 1) * 1.323102 ^2 + 
                               (231.0724 - 1) * 1.261216 ^2) / 
                              (265.6749 + 231.0724 - 2))
#0.1203801

#2019 vs 2020
(1.628829  - 1.587480 ) / sqrt(((231.0724 - 1) * 1.261216 ^2 + 
                               (501.4259 - 1) * 1.272649 ^2) / 
                              (231.0724 + 501.4259 - 2))
# 0.0325824

#2020 vs 2021
(1.587480 - 1.784630 )/ sqrt(((501.4259 - 1) * 1.272649 ^2 + 
                              (492.5051 - 1) * 1.326740 ^2) / 
                             (501.4259 + 492.5051 - 2))
# -0.151685

# ES for Mode_of_Data_Collection_

calculate_hedges_g(data = survey_design_w,
                   grouping_var = "Mode_of_Data_Collection_",
                   response_var = "MoA_")

#0.03801479


# ES for Interview_language_
calculate_hedges_g(data = survey_design_w,
                   grouping_var = "Interview_language_",
                   response_var = "MoA_")

#-0.3473359

# ES for AGE

svycor(~MoA_ + AGE_l, design = survey_design_w)
#0.47
r_to_d(0.47)
#1.064955

svycor(~MoA_ + AGE_q, design = survey_design_w)
#0.08
r_to_d(0.08)
#0.1605145


# ES for Finan_satisfaction_
svycor(~MoA_ + Finan_satisfaction_, design = survey_design_w)
#-0.08
r_to_d(-0.08)
#-0.1605145

# ES for Score_Neg_Emotions_
svycor(~MoA_ + Score_Neg_Emotions_, design = survey_design_w)
#-0.08
r_to_d(-0.08)
#-0.1605145

# ES for SRS_
svycor(~MoA_ + SRS_, design = survey_design_w)
#0.08
r_to_d(0.08)
#0.1605145

# Calculate the weighted mean from ad model

pred_means_ad <- svyby(~predicted_ad, ~Year, design = survey_design_w, FUN = svymean)
c <- svyby(~predicted_ad, by = ~Year, design = survey_design_w, svyvar) 
sd <- sqrt(c$fit)
pred_means_ad$sd <- sd
pred_means_ad$n <- svytotal(~Year, design = survey_design_w)
CI<-confint(svyby(~predicted_ad, ~Year, design = survey_design_w, FUN = svymean))
pred_means_ad <- cbind(pred_means_ad, CI[,"2.5 %"], CI[,"97.5 %"])
colnames(pred_means_ad) <- c("Year", "mean", "se", "sd", "n","CI_low", "CI_high")


# Calculate the weighted mean from unad model
pred_means_unad <- svyby(~predicted_unad, ~Year, design = survey_design_w, FUN = svymean)
r <- svyby(~predicted_unad, by = ~Year, design = survey_design_w, svyvar) 
sd <- sqrt(r$fit)
pred_means_unad$sd <- sd
CI<-confint(svyby(~pred_means_unad, ~Year, design = survey_design_w, FUN = svymean))
pred_means_unad <- cbind(pred_means_unad, CI[,"2.5 %"], CI[,"97.5 %"])
colnames(pred_means_unad) <- c("Year", "mean", "se", "sd", "n","CI_low", "CI_high")


# Combine the data
combined_data_x <- rbind(
  transform(pred_means_ad, Model = "Adjusted model"),
  transform(pred_means_unad, Model = "Crew model")
)

ggplot(combined_data_x, aes(x = Year, y = mean, color = Model, group = Model)) +
  geom_line() +
  geom_point(size = 3) +
  geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 5) +  # Add values on the points
  scale_color_manual(values = c( "Adjusted model" = "deeppink3", "Crew model" = "slateblue")) +  # Customize colors
  labs(x = "Year", y = "Markers of Adulthood Score [0;5] ", color = "GEE model", title = "Evolution of markers of adulhood", subtitle = "GEE model, weightened male data") +
  coord_cartesian(ylim = c(1.6,2.2)) +
  theme_minimal()

########################################################################
##### Unweightened analysis, exchangeable WCS (g4 as initial model) ####
########################################################################

MoA_Clean_M_pd_u<-MoA_Clean_M_pd

##### removing influential obs based on Cooks.d

cooks_d <-cooks.distance(g4, level = c("observations")) 

cutoff =4/length(cooks_d)

# Identify influential observations
influential_obs<-which(cooks_d > cutoff) # 96 id
MoA_Clean_M_pd_u<-MoA_Clean_M_pd_u[-(which(cooks_d > cutoff)), ] # 1657 obs

g4.2 <- glmgee(MoA_f,
               data = MoA_Clean_M_pd_u,
               weights = weight_by_gender,
               id = (IDPERS:IDHOUS),
               corstr = "exchangeable") 

summary(g4.2) 
raw_pvalues <- c(2.4481e-06, 0.08458593, 0.05295529,0.12945355)
adjusted_pvalues <- p.adjust(raw_pvalues, method = "holm") 
# 0.0000097924 0.1691718600 0.1588658700 0.1691718600
confint(g4.2)

###############
##### plot ####
###############

# 1) Create an unadjusted model

g4.2_unad<- glmgee(MoA_ ~ Year,
                   data = MoA_Clean_M_pd_u,
                   id = (IDPERS:IDHOUS),
                   corstr = "exchangeable") 
summary(g4.2_unad)
raw_pvalues <- c(2.22e-16, 0.00077750, 0.00013842, 1.2494e-07)
adjusted_pvalues <- p.adjust(raw_pvalues, method = "holm") 
# Estimates:1.66416     ;0.11874    ; 0.16653    ; 0.17200            
# 8.8800e-16 7.7750e-04 2.7684e-04 3.7482e-07


# 2) Create an survey design data with predicted values
MoA_Clean_M_pd_u$predicted_ad <- predict(g4.2, type = "link")
MoA_Clean_M_pd_u$predicted_unad <- predict(g4.2_unad, type = "link")

survey_design_u<- svydesign(ids = ~(IDPERS:IDHOUS), data = MoA_Clean_M_pd_u)

# 3) Plot the models

# Observed
observed_means <- svyby(~MoA_, ~Year, design = survey_design_u, FUN = svymean)
y <- svyby(~MoA_, by = ~Year, design = survey_design_u, svyvar) 
sd <- sqrt(y$MoA_)
observed_means$sd <- sd
colnames(observed_means) <- c("Year", "mean", "se", "sd")

# Calculate the weighted mean from ad model
pred_means_ad <- svyby(~predicted_ad, ~Year, design = survey_design_u, FUN = svymean)
c <- svyby(~predicted_ad, by = ~Year, design = survey_design_u, svyvar) 
sd <- sqrt(c$fit)
pred_means_ad$sd <- sd
colnames(pred_means_ad) <- c("Year", "mean", "se", "sd")

# Calculate the weighted mean from unad model
pred_means_unad <- svyby(~predicted_unad, ~Year, design = survey_design_u, FUN = svymean)
r <- svyby(~predicted_unad, by = ~Year, design = survey_design_u, svyvar) 
sd <- sqrt(r$fit)
pred_means_unad$sd <- sd
colnames(pred_means_unad) <- c("Year", "mean", "se", "sd")

# Combine the data
combined_data_x <- rbind(
  transform(pred_means_ad, Model = "Adjusted model"),
  transform(pred_means_unad, Model = "Raw model")
)

ggplot(combined_data_x, aes(x = Year, y = mean, color = Model, group = Model)) +
  geom_line() +
  geom_point(size = 3) +
  geom_text(aes(label = round(mean, 2)), vjust = -0.5, color = "black", size = 5) +  # Add values on the points
  scale_color_manual(values = c( "Adjusted model" = "deeppink3", "Raw model" = "slateblue")) +  # Customize colors
  labs(x = "Year", y = "Markers of Adulthood Score [0;5] ", color = "GEE model", title = "Evolution of markers of adulhood ", subtitle = "GEE model (Exchangeable WCS), not weightened male data") +
  coord_cartesian(ylim = c(1.5,2.2)) +
  theme_minimal()
